@import url("https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,500,500i,700,700i");
* {
  font-size: inherit;
  font-weight: 400;
  font-weight: inherit;
  font-style: inherit;
  margin: 0;
  padding: 0;
  list-style: none;
  text-decoration: none;
  color: inherit;
  border: none;
  border-radius: 0;
  outline: none;
  background: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  -moz-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

*:focus {
  outline: 0;
}

i {
  font-style: italic;
}

html {
  font-family: 'Roboto', sans-serif;
  width: 100%;
  height: 100%;
  color: #FFF;
}

body {
  position: relative;
  display: flex;
  overflow: hidden;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  max-height: 100%;
  background: linear-gradient(180deg, #9951F5 0%, #7256E3 100%);
}

body.-invertedbg {
  background: #FFF;
}

body.-invertedbg .page-content.-active svg path {
  fill: #9951F5;
}

body.-invertedbg .text-box .text {
  color: #FFF;
}

main {
  display: flex;
  flex-direction: column;
}

.wrapper {
  display: flex;
  flex-direction: column;
  transition: -webkit-mask-image 0.35s cubic-bezier(0.55, 0, 0.1, 1);
  transition: mask-image 0.35s cubic-bezier(0.55, 0, 0.1, 1);
  transition: mask-image 0.35s cubic-bezier(0.55, 0, 0.1, 1), -webkit-mask-image 0.35s cubic-bezier(0.55, 0, 0.1, 1);
}

svg g {
  transition: opacity .35s linear;
  opacity: 1;
}

input {
  font-family: 'Roboto', sans-serif;
}

.-highlight {
  padding: 2px 4px;
  padding-right: 0;
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.19, 0.01, 0.03, 1.01);
  text-decoration: none;
  color: #FFF;
  background-color: #9951F5;
}

.speeches {
  min-height: 80vh;
  overflow: auto;
  -webkit-mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, black 45px, black calc(100% - 45px), rgba(0, 0, 0, 0) 100%);
          mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, black 45px, black calc(100% - 45px), rgba(0, 0, 0, 0) 100%);
}

.back._hidden {
  display: none;
}

.nav-bar {
  display: flex;
  align-items: center;
  flex: 1 0 auto;
  justify-content: space-between;
  height: 80px;
  padding-right: 8vw;
  padding-left: 8vw;
  transition: all .4s linear;
  color: #FFF;
}

.nav-bar a {
  text-decoration: none;
}

.nav-bar > .info {
  display: flex;
  align-items: center;
}

.nav-bar > .info > .back {
  position: relative;
  z-index: 80;
  width: 22px;
  height: 20px;
  margin-left: -10px;
  padding: 10px;
  cursor: pointer;
  background-image: url("/static/img/arrow-white.svg");
  background-repeat: no-repeat;
  background-position: center;
}

.nav-bar > .info > .breadcrumb {
  font-size: 16px;
  display: flex;
  flex-direction: column;
  width: 90%;
  text-transform: uppercase;
}

.nav-bar > .info > .breadcrumb > .title {
  font-size: 20px;
  font-weight: bold;
}

.nav-bar > .info > .breadcrumb > .name {
  font-size: 10px;
}

.nav-bar > .filter {
  width: 22px;
  height: 20px;
  margin-right: -10px;
  padding: 10px;
  cursor: pointer;
  background-image: url("/static/img/filter-white.svg");
  background-repeat: no-repeat;
  background-position: center;
}

.nav-bar.-negative {
  color: #000;
}

.nav-bar.-negative > .filter {
  background-image: url("/static/img/filter-black.svg");
}

.nav-bar.-negative > .info > .back {
  background-image: url("/static/img/arrow-black.svg");
}

.filter-modal {
  position: fixed;
  z-index: 100;
  top: 0;
  left: 0;
  box-sizing: border-box;
  width: 100%;
  padding: 20px 8vw;
  transition: -webkit-transform cubic-bezier(0.55, 0, 0.1, 1) 0.5s;
  transition: transform cubic-bezier(0.55, 0, 0.1, 1) 0.5s;
  transition: transform cubic-bezier(0.55, 0, 0.1, 1) 0.5s, -webkit-transform cubic-bezier(0.55, 0, 0.1, 1) 0.5s;
  -webkit-transform: translateY(-105%);
          transform: translateY(-105%);
  color: #000;
  background-color: #FFF;
  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.25);
}

.filter-modal.-active {
  -webkit-transform: translateY(0);
          transform: translateY(0);
}

.filter-modal > .nav {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.filter-modal > .content {
  display: flex;
  flex-direction: column;
  width: 80%;
  margin: 0 auto;
  margin-bottom: 20px;
}

.filter-modal > .content > label {
  font-size: 12px;
  font-weight: bold;
  margin-top: 30px;
  text-transform: uppercase;
  color: #000;
}

.filter-modal > .content > input {
  font-size: 14px;
  width: 100%;
  margin-top: 4px;
  padding-top: 6px;
  padding-bottom: 6px;
  transition: all cubic-bezier(0.55, 0, 0.1, 1) 0.25s;
  color: #000;
  border: none;
  border-bottom: 1px solid #000;
  background: none;
}

.filter-modal > .content > input:focus {
  transition: none;
  color: #7256E3;
  border-color: #7256E3;
  outline: none;
}

.filter-modal > .content > .button {
  font-size: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 30px;
  padding: 10px;
  text-decoration: none;
  color: #FFF;
  background-color: #9951F5;
}

.filter-modal > .content > .button:hover {
  background-color: #7256E3;
}

.filter-modal > .content > select {
  margin-top: 4px;
  padding-top: 6px;
  padding-bottom: 6px;
  border-bottom: 1px solid #000;
}

.filter-modal > .nav > a {
  color: #000;
}

.filter-modal > .nav > .close {
  display: inline-block;
  width: 16px;
  height: 16px;
  margin-right: -10px;
  padding: 10px;
  cursor: pointer;
  background-image: url("/static/img/close.svg");
  background-repeat: no-repeat;
  background-position: center;
  background-size: 50%;
}

.filter-modal > .nav > .title {
  font-family: 'Roboto';
  font-size: 17px;
  font-weight: bold;
  text-decoration: none;
  text-transform: uppercase;
}

.ball-animation {
  position: absolute;
  z-index: 200;
  top: 0;
  left: 0;
  display: none;
  width: 1px;
  height: 1px;
  -webkit-animation: circle-scale cubic-bezier(0.55, 0, 0.1, 1) 0.7s;
          animation: circle-scale cubic-bezier(0.55, 0, 0.1, 1) 0.7s;
  border-radius: 50%;
  background-color: #FFF;
}

.ball-animation.-active {
  display: block;
}

.ball-animation.-invertedbg {
  background-color: #9951F5;
}

.ball-animation.-reverse {
  animation-direction: reverse;
}

@-webkit-keyframes circle-scale {
  0% {
    transition: -webkit-transform cubic-bezier(0.55, 0, 0.1, 1) 0.7s;
    transition: transform cubic-bezier(0.55, 0, 0.1, 1) 0.7s;
    transition: transform cubic-bezier(0.55, 0, 0.1, 1) 0.7s, -webkit-transform cubic-bezier(0.55, 0, 0.1, 1) 0.7s;
    -webkit-transform: translate(-50%, -50%) scale(0);
            transform: translate(-50%, -50%) scale(0);
  }
  100% {
    -webkit-transform: translate(-50%, -50%) scale(1200);
            transform: translate(-50%, -50%) scale(1200);
  }
}

@keyframes circle-scale {
  0% {
    transition: -webkit-transform cubic-bezier(0.55, 0, 0.1, 1) 0.7s;
    transition: transform cubic-bezier(0.55, 0, 0.1, 1) 0.7s;
    transition: transform cubic-bezier(0.55, 0, 0.1, 1) 0.7s, -webkit-transform cubic-bezier(0.55, 0, 0.1, 1) 0.7s;
    -webkit-transform: translate(-50%, -50%) scale(0);
            transform: translate(-50%, -50%) scale(0);
  }
  100% {
    -webkit-transform: translate(-50%, -50%) scale(1200);
            transform: translate(-50%, -50%) scale(1200);
  }
}

.text-box {
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  width: auto;
  height: 100%;
}

.text-box > .text {
  font-size: 20px;
  font-weight: bold;
  text-align: center;
  text-transform: uppercase;
  color: black;
}

.manifestation-page {
  position: fixed;
  overflow: none;
  box-sizing: border-box;
  height: calc(100% - 80px);
  transition: all 0.35s cubic-bezier(0.55, 0, 0.1, 1);
  -webkit-transform: translateY(100%);
          transform: translateY(100%);
  color: #000;
  background-color: #FFF;
}

.manifestation-page.-open {
  -webkit-transform: translateY(0);
          transform: translateY(0);
}

.manifestation-page > .header {
  padding: 30px 8vw 20px 8vw;
}

.manifestation-page > .header > strong {
  font-size: 18px;
  font-weight: bold;
}

.manifestation-page > .header > .close-manifestation {
  position: absolute;
  top: 22px;
  right: 8vw;
  display: inline-block;
  width: 16px;
  height: 16px;
  margin-right: -10px;
  padding: 10px;
  background-image: url("/static/img/close.svg");
  background-repeat: no-repeat;
  background-position: center;
  background-size: 50%;
}

.manifestation-page > .content {
  overflow-y: scroll;
  height: calc(100% - 104px);
  padding: 0 8vw 30px 8vw;
}

.manifestation-page > .content > p {
  font-size: 14px;
  line-height: 1.5;
}

.hex-loading {
  position: fixed;
  top: 50%;
  left: 50%;
  transition: opacity 0.35s cubic-bezier(0.55, 0, 0.1, 1);
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  opacity: 0;
}

.hex-loading.-visible {
  opacity: 1;
}

.hex-loading > svg {
  width: 60px;
  height: 60px;
  fill: #FFF;
}

.hex-loading > svg > path {
  -webkit-transform-origin: 50% 50%;
          transform-origin: 50% 50%;
  -webkit-animation: fadein 3.3s infinite;
          animation: fadein 3.3s infinite;
  opacity: 0;
  fill: rgba(255, 255, 255, 0.9);
}

.hex-loading > svg > path:nth-child(2) {
  -webkit-animation-delay: .2s;
          animation-delay: .2s;
}

.hex-loading > svg > path:nth-child(3) {
  -webkit-animation-delay: .4s;
          animation-delay: .4s;
}

.hex-loading > svg > path:nth-child(4) {
  -webkit-animation-delay: .6s;
          animation-delay: .6s;
}

.hex-loading > svg > path:nth-child(5) {
  -webkit-animation-delay: .8s;
          animation-delay: .8s;
}

.hex-loading > svg > path:nth-child(6) {
  -webkit-animation-delay: 1.0s;
          animation-delay: 1.0s;
}

.hex-loading > svg > path:nth-child(7) {
  -webkit-animation-delay: 1.2s;
          animation-delay: 1.2s;
}

@-webkit-keyframes fadein {
  0%,
  100% {
    -webkit-transform: scale(0.001, 0.001);
            transform: scale(0.001, 0.001);
    opacity: 0;
  }
  33%,
  66% {
    -webkit-transform: scale(0.9, 0.9);
            transform: scale(0.9, 0.9);
    opacity: 1;
  }
}

@keyframes fadein {
  0%,
  100% {
    -webkit-transform: scale(0.001, 0.001);
            transform: scale(0.001, 0.001);
    opacity: 0;
  }
  33%,
  66% {
    -webkit-transform: scale(0.9, 0.9);
            transform: scale(0.9, 0.9);
    opacity: 1;
  }
}

.hex-bg {
  position: relative;
  z-index: -1;
  display: flex;
  flex-wrap: wrap;
  transition: opacity 1s cubic-bezier(0.55, 0, 0.1, 1);
  opacity: 0;
}

.hex-bg.-visible {
  opacity: 1;
}

.hex-bg > .element {
  position: absolute;
  width: 300px;
  height: 330px;
  -webkit-animation-name: floating-bg;
          animation-name: floating-bg;
  -webkit-animation-timing-function: ease-in-out;
          animation-timing-function: ease-in-out;
  -webkit-animation-iteration-count: infinite;
          animation-iteration-count: infinite;
  background-image: url("/static/img/hex-blur.svg");
  background-repeat: no-repeat;
  background-size: contain;
}

@-webkit-keyframes floating-bg {
  from {
    -webkit-transform: translate(0, 0) translateZ(0);
            transform: translate(0, 0) translateZ(0);
  }
  55% {
    -webkit-transform: translate(5%, 5%) translateZ(0);
            transform: translate(5%, 5%) translateZ(0);
  }
  to {
    -webkit-transform: translate(0, 0) translateZ(0);
            transform: translate(0, 0) translateZ(0);
  }
}

@keyframes floating-bg {
  from {
    -webkit-transform: translate(0, 0) translateZ(0);
            transform: translate(0, 0) translateZ(0);
  }
  55% {
    -webkit-transform: translate(5%, 5%) translateZ(0);
            transform: translate(5%, 5%) translateZ(0);
  }
  to {
    -webkit-transform: translate(0, 0) translateZ(0);
            transform: translate(0, 0) translateZ(0);
  }
}

.hex-bg > .element:nth-child(1) {
  -webkit-animation-duration: 5s;
          animation-duration: 5s;
}

.hex-bg > .element:nth-child(2) {
  -webkit-animation-duration: 7s;
          animation-duration: 7s;
}

.hex-bg > .element:nth-child(3) {
  -webkit-animation-duration: 5s;
          animation-duration: 5s;
}

.hex-bg > .element:nth-child(4) {
  -webkit-animation-duration: 6s;
          animation-duration: 6s;
}

.hex-bg > .element:nth-child(5) {
  -webkit-animation-duration: 7s;
          animation-duration: 7s;
}

.hex-bg > .element:nth-child(6) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hex-bg > .element:nth-child(7) {
  -webkit-animation-duration: 10s;
          animation-duration: 10s;
}

.hex-bg > .element:nth-child(8) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hex-bg > .element:nth-child(9) {
  -webkit-animation-duration: 9s;
          animation-duration: 9s;
}

.hex-bg > .element:nth-child(10) {
  -webkit-animation-duration: 7s;
          animation-duration: 7s;
}

.hex-bg > .element:nth-child(11) {
  -webkit-animation-duration: 5s;
          animation-duration: 5s;
}

.hex-bg > .element:nth-child(12) {
  -webkit-animation-duration: 5s;
          animation-duration: 5s;
}

.hex-bg > .element:nth-child(13) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hex-bg > .element:nth-child(14) {
  -webkit-animation-duration: 6s;
          animation-duration: 6s;
}

.hex-bg > .element:nth-child(15) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hex-bg > .element:nth-child(16) {
  -webkit-animation-duration: 5s;
          animation-duration: 5s;
}

.hex-bg > .element:nth-child(17) {
  -webkit-animation-duration: 7s;
          animation-duration: 7s;
}

.hex-bg > .element:nth-child(18) {
  -webkit-animation-duration: 9s;
          animation-duration: 9s;
}

.hex-bg > .element:nth-child(19) {
  -webkit-animation-duration: 9s;
          animation-duration: 9s;
}

.hex-bg > .element:nth-child(20) {
  -webkit-animation-duration: 5s;
          animation-duration: 5s;
}

.hex-bg > .element:nth-child(odd) {
  left: -100px;
}

.hex-bg > .element:nth-child(even) {
  right: -100px;
}

.hex-bg > .element:nth-child(1) {
  top: 0;
}

.hex-bg > .element:nth-child(2) {
  top: 300px;
}

.hex-bg > .element:nth-child(3) {
  top: 600px;
}

.hex-bg > .element:nth-child(4) {
  top: 900px;
}

.hex-bg > .element:nth-child(5) {
  top: 1200px;
}

.page-content {
  display: flex;
  justify-content: center;
  -webkit-mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, black 45px, black calc(100% - 45px), rgba(0, 0, 0, 0) 100%);
          mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, black 45px, black calc(100% - 45px), rgba(0, 0, 0, 0) 100%);
}

.speeches-list {
  position: relative;
  display: flex;
  flex-direction: column;
  padding: 20px 8vw 40px 8vw;
}

.speeches-list::before {
  position: absolute;
  top: 70px;
  display: block;
  width: 2px;
  height: 100%;
  margin-left: 19px;
  content: '';
  background-color: #FFF;
}

.speeches-list > .item {
  display: flex;
  margin-top: 20px;
  cursor: pointer;
}

.speeches-list > .item > .hex {
  width: 40px;
  -webkit-transform-origin: center;
          transform-origin: center;
  background-image: url("/static/img/hexagon.svg");
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
}

.speeches-list > .item > .hex.-size5 {
  -webkit-transform: scale(1);
          transform: scale(1);
}

.speeches-list > .item > .hex.-size4 {
  -webkit-transform: scale(0.8);
          transform: scale(0.8);
}

.speeches-list > .item > .hex.-size3 {
  -webkit-transform: scale(0.6);
          transform: scale(0.6);
}

.speeches-list > .item > .hex.-size2 {
  -webkit-transform: scale(0.4);
          transform: scale(0.4);
}

.speeches-list > .item > .hex.-size1 {
  -webkit-transform: scale(0.2);
          transform: scale(0.2);
}

.speeches-list > .item > .content {
  flex: 1;
  margin-left: 30px;
}

.speeches-list > .item > .content > p {
  font-size: .75rem;
  margin-top: 2px;
}

.speeches-list > .item > .content > .timestamp {
  display: flex;
}

.speeches-list > .item > .content > .timestamp > * + * {
  margin-left: 5px;
}

.speeches-list > .item > .content > .timestamp > span {
  font-size: 1rem;
  font-weight: bold;
}

.hexagon-group {
  cursor: pointer;
  -webkit-animation-timing-function: ease-in-out;
          animation-timing-function: ease-in-out;
  -webkit-animation-iteration-count: infinite;
          animation-iteration-count: infinite;
}

@-webkit-keyframes floating {
  from {
    -webkit-transform: translate(0, 0) translateZ(0);
            transform: translate(0, 0) translateZ(0);
  }
  55% {
    -webkit-transform: translate(0.3%, 0.3%) translateZ(0);
            transform: translate(0.3%, 0.3%) translateZ(0);
  }
  to {
    -webkit-transform: translate(0, 0) translateZ(0);
            transform: translate(0, 0) translateZ(0);
  }
}

@keyframes floating {
  from {
    -webkit-transform: translate(0, 0) translateZ(0);
            transform: translate(0, 0) translateZ(0);
  }
  55% {
    -webkit-transform: translate(0.3%, 0.3%) translateZ(0);
            transform: translate(0.3%, 0.3%) translateZ(0);
  }
  to {
    -webkit-transform: translate(0, 0) translateZ(0);
            transform: translate(0, 0) translateZ(0);
  }
}

.hexagon-group:nth-child(1) {
  -webkit-animation-duration: 10s;
          animation-duration: 10s;
}

.hexagon-group:nth-child(2) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hexagon-group:nth-child(3) {
  -webkit-animation-duration: 10s;
          animation-duration: 10s;
}

.hexagon-group:nth-child(4) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hexagon-group:nth-child(5) {
  -webkit-animation-duration: 9s;
          animation-duration: 9s;
}

.hexagon-group:nth-child(6) {
  -webkit-animation-duration: 9s;
          animation-duration: 9s;
}

.hexagon-group:nth-child(7) {
  -webkit-animation-duration: 9s;
          animation-duration: 9s;
}

.hexagon-group:nth-child(8) {
  -webkit-animation-duration: 10s;
          animation-duration: 10s;
}

.hexagon-group:nth-child(9) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hexagon-group:nth-child(10) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hexagon-group:nth-child(11) {
  -webkit-animation-duration: 6s;
          animation-duration: 6s;
}

.hexagon-group:nth-child(12) {
  -webkit-animation-duration: 6s;
          animation-duration: 6s;
}

.hexagon-group:nth-child(13) {
  -webkit-animation-duration: 10s;
          animation-duration: 10s;
}

.hexagon-group:nth-child(14) {
  -webkit-animation-duration: 7s;
          animation-duration: 7s;
}

.hexagon-group:nth-child(15) {
  -webkit-animation-duration: 6s;
          animation-duration: 6s;
}

.hexagon-group:nth-child(16) {
  -webkit-animation-duration: 8s;
          animation-duration: 8s;
}

.hexagon-group:nth-child(17) {
  -webkit-animation-duration: 10s;
          animation-duration: 10s;
}

.hexagon-group:nth-child(18) {
  -webkit-animation-duration: 9s;
          animation-duration: 9s;
}

.hexagon-group:nth-child(19) {
  -webkit-animation-duration: 7s;
          animation-duration: 7s;
}

.hexagon-group:nth-child(20) {
  -webkit-animation-duration: 10s;
          animation-duration: 10s;
}

.simple-link {
  align-self: center;
  margin-top: 10px;
  padding: 20px;
  text-decoration: underline;
  color: #000;
}

.simple-link:active {
  color: #9951F5;
}

.range-slider {
  padding: 0 10vw;
}

._hidden {
  visibility: hidden;
  width: 0;
  height: 0 !important;
  opacity: 0;
}

._hidden.-active {
  transition: opacity .3s 0s, visibility 0s .3s, width 0s .3s, height 0s .3s;
}
/*# sourceMappingURL=data:application/json;base64, */